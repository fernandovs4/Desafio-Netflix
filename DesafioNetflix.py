import numpy as np
from scipy.linalg import diagsvd
import pandas as pd
import time

a = [[0.34701013565063477, 0.05498671531677246, 0.002161741256713867, 1], [0.288189172744751, 0.024192333221435547, 0.0016260147094726562, 1], [0.16485071182250977, 0.02774214744567871, 0.0015692710876464844, 1], [0.16405534744262695, 0.02592635154724121, 0.0012006759643554688, 1], [0.1708388328552246, 0.046057701110839844, 0.001077890396118164, 1], [0.16450238227844238, 0.02570343017578125, 0.0008897781372070312, 1], [0.16396260261535645, 0.03064417839050293, 0.0010123252868652344, 1], [0.16404175758361816, 0.025616168975830078, 0.0014107227325439453, 7.486343383789062e-05, 2.1457672119140625e-05, 1], [0.16783666610717773, 0.025873661041259766, 0.0015628337860107422, 1], [0.1764070987701416, 0.02506113052368164, 0.0008752346038818359, 1], [0.16362905502319336, 0.026108980178833008, 0.0012981891632080078, 3.8623809814453125e-05, 1], [0.165632963180542, 0.023905038833618164, 0.0010769367218017578, 1], [0.16609787940979004, 0.03057241439819336, 0.0016045570373535156, 1], [0.1772303581237793, 0.02584075927734375, 0.0015919208526611328, 1], [0.17292523384094238, 0.02637314796447754, 0.001474618911743164, 1], [0.16561675071716309, 0.02695918083190918, 0.0013842582702636719, 1], [0.16137266159057617, 0.030340194702148438, 0.0009937286376953125, 1], [0.1743781566619873, 0.034676313400268555, 0.001447916030883789, 1], [0.1642754077911377, 0.024082422256469727, 0.0010573863983154297, 1], [0.16167712211608887, 0.028230667114257812, 0.0011060237884521484, 1], [0.16011428833007812, 0.033123016357421875, 0.0015358924865722656, 0.00012636184692382812, 1], [0.1642451286315918, 0.027019023895263672, 0.004082918167114258, 0.00020813941955566406, 1], [0.1687319278717041, 0.025650978088378906, 0.001440286636352539, 1], [0.16547822952270508, 0.026039838790893555, 0.0011126995086669922, 1], [0.16399264335632324, 0.026786327362060547, 0.0016472339630126953, 1], [0.1707763671875, 0.023822784423828125, 0.0009808540344238281, 1], [0.17817044258117676, 0.0340578556060791, 0.0012836456298828125, 1], [0.1597440242767334, 0.029777050018310547, 0.0010800361633300781, 1], [0.171675443649292, 0.025025606155395508, 0.0015146732330322266, 1], [0.1738729476928711, 0.024145126342773438, 0.0010862350463867188, 1], [0.19202446937561035, 0.029549837112426758, 0.0016489028930664062, 0.00012111663818359375, 1], [0.16576647758483887, 0.027240514755249023, 0.0011281967163085938, 1], [0.16928339004516602, 0.025821208953857422, 0.0012357234954833984, 1], [0.17368125915527344, 0.024089336395263672, 0.001089334487915039, 1], [0.1638188362121582, 0.03558206558227539, 0.0015430450439453125, 1], [0.1605536937713623, 0.03221011161804199, 0.0012464523315429688, 6.747245788574219e-05, 1], [0.16457104682922363, 0.030873775482177734, 0.0011887550354003906, 1], [0.16272544860839844, 0.029288768768310547, 0.001192331314086914, 1], [0.1588900089263916, 0.031227827072143555, 0.0016090869903564453, 0.0001125335693359375, 1], [0.17799043655395508, 0.026438236236572266, 0.0011093616485595703, 1], [0.16385698318481445, 0.02683424949645996, 0.001617431640625, 1], [0.1690201759338379, 0.027482986450195312, 0.0010142326354980469, 1], [0.16885948181152344, 0.02652287483215332, 0.0010449886322021484, 6.4849853515625e-05, 1], [0.18258261680603027, 0.040868282318115234, 0.0025315284729003906, 1], [0.3272664546966553, 0.05697274208068848, 0.002007007598876953, 0.0002040863037109375, 3.528594970703125e-05, 1], [0.3438551425933838, 0.0509335994720459, 0.0030794143676757812, 1], [0.3416562080383301, 0.052117109298706055, 0.004497528076171875, 1], [0.3423616886138916, 0.05007457733154297, 0.0017693042755126953, 1], [0.35409998893737793, 0.0552668571472168, 0.004843473434448242, 0.0002460479736328125, 1], [0.34474658966064453, 0.05620384216308594, 0.002014636993408203, 0.00012731552124023438, 1], [0.3341536521911621, 0.05340218544006348, 0.0027680397033691406, 0.00011134147644042969, 1], [0.32177186012268066, 0.047156572341918945, 0.0028564929962158203, 0.00011157989501953125, 1], [0.16602087020874023, 0.02597641944885254, 0.0011320114135742188, 1], [0.17418670654296875, 0.02630901336669922, 0.0014107227325439453, 1], [0.17166924476623535, 0.028431177139282227, 0.0011126995086669922, 1], [0.1732032299041748, 0.027260541915893555, 0.0010051727294921875, 1], [0.1588895320892334, 0.027372121810913086, 0.0015306472778320312, 1], [0.17210865020751953, 0.025908946990966797, 0.0016376972198486328, 1], [0.16593432426452637, 0.02617359161376953, 0.0015459060668945312, 6.604194641113281e-05, 1], [0.1701831817626953, 0.02871990203857422, 0.0012927055358886719, 7.581710815429688e-05, 1], [0.16364216804504395, 0.028228044509887695, 0.0016064643859863281, 1], [0.1830458641052246, 0.028977632522583008, 0.0022318363189697266, 6.866455078125e-05, 1], [0.20707297325134277, 0.03004288673400879, 0.0014357566833496094, 1], [0.16559934616088867, 0.026776552200317383, 0.0018019676208496094, 0.00013446807861328125, 1], [0.1931314468383789, 0.024223804473876953, 0.0020935535430908203, 1], [0.17510175704956055, 0.027779102325439453, 0.0012972354888916016, 7.367134094238281e-05, 1], [0.16578006744384766, 0.03506135940551758, 0.0011715888977050781, 1], [0.2120509147644043, 0.026159048080444336, 0.0012238025665283203, 1], [0.16857409477233887, 0.02651834487915039, 0.002071857452392578, 1], [0.16661334037780762, 0.029561996459960938, 0.0008707046508789062, 1], [0.1697530746459961, 0.027509450912475586, 0.001220703125, 1], [0.16346287727355957, 0.024785280227661133, 0.0009765625, 1], [0.17087697982788086, 0.024843215942382812, 0.0011136531829833984, 1], [0.23006391525268555, 0.03509044647216797, 0.0028295516967773438, 0.0001246929168701172, 1], [0.17502236366271973, 0.027347087860107422, 0.0015234947204589844, 1], [0.1652529239654541, 0.07851862907409668, 0.0021886825561523438, 1], [0.1622772216796875, 0.027019977569580078, 0.001196146011352539, 1], [0.17532825469970703, 0.0353543758392334, 0.001119375228881836, 1], [0.2286391258239746, 0.026922225952148438, 0.0015745162963867188, 1], [0.1694800853729248, 0.03253293037414551, 0.0013349056243896484, 1], [0.16541004180908203, 0.028370380401611328, 0.0015385150909423828, 6.628036499023438e-05, 1], [0.169572114944458, 0.03759336471557617, 0.0015859603881835938, 1], [0.1647953987121582, 0.02730560302734375, 0.0011174678802490234, 0.00010633468627929688, 1], [0.1729137897491455, 0.025346755981445312, 0.0009889602661132812, 1], [0.1633920669555664, 0.02685403823852539, 0.0012521743774414062, 1], [0.16320109367370605, 0.030922889709472656, 0.0016732215881347656, 1], [0.18152809143066406, 0.026560306549072266, 0.001817941665649414, 0.00014972686767578125, 2.7179718017578125e-05, 0], [0.16902446746826172, 0.025559663772583008, 0.0012807846069335938, 1], [0.1654975414276123, 0.027014493942260742, 0.0015461444854736328, 1], [0.16561126708984375, 0.02448558807373047, 0.0010144710540771484, 1], [0.17026901245117188, 0.025304317474365234, 0.0010981559753417969, 1], [0.16533136367797852, 0.029099225997924805, 0.0016176700592041016, 1], [0.17287254333496094, 0.04681396484375, 0.003977298736572266, 0.0001327991485595703, 1], [0.3158884048461914, 0.05529189109802246, 0.0018057823181152344, 1], [0.3410968780517578, 0.05021357536315918, 0.0028438568115234375, 0.00015497207641601562, 3.600120544433594e-05, 1], [0.3327951431274414, 0.055206298828125, 0.002504587173461914, 1], [0.3620309829711914, 0.05499529838562012, 0.0031859874725341797, 0.0001621246337890625, 1], [0.32478857040405273, 0.06081390380859375, 0.0022826194763183594, 1], [0.33203673362731934, 0.056287527084350586, 0.0020265579223632812, 1], [0.33065032958984375, 0.050861358642578125, 0.0031805038452148438, 1]]


import random


def calculaAuto(B): #função utilizada para calcular os autovetores e autovalores
    

    # Calculando a SVD de B
    U, s, Vtransposto = np.linalg.svd(B)

    # Matriz Sigma
    sigma = np.zeros(B.shape)
    sigma[:len(s), :len(s)] = np.diag(s)
    return sigma, U, Vtransposto


def escolheAleatorio(A):
    # funcao que escolhe um numero aleatorio de um array
    
    

  
    df = A

        # Obtenha uma lista dos índices de linhas e colunas que não são NaN
    indices_validos = np.argwhere(~np.isnan(df.values))

    # Escolha um índice aleatório que não seja NaN
    indice_aleatorio = np.random.choice(len(indices_validos))

    # Obtenha a linha e a coluna correspondente ao índice selecionado aleatoriamente
    linha, coluna = indices_validos[indice_aleatorio]

    # Obtenha o elemento e a posição correspondente no dataframe
    elemento = df.iloc[linha, coluna]
    
    print("Elemento aleatório não-NaN:", elemento)
    print("Posição do elemento:", linha, coluna)
    df = df.fillna(2.5)

    df = df.to_numpy()
    B = df.copy()
    B[linha,coluna] = random.randrange(1, 6)
    print(B[linha][coluna], "aaaaaaaaaaaaa")
   # funcao principal
    numero = elemento
   
    return B, numero, linha, coluna


def svd(A):
    B, numero, linha, coluna = escolheAleatorio(A)


    sigma, U, V_transposto = calculaAuto(B)
   

    maximo = len(sigma)  - 1
 
    print(numero)
    print(B[linha][coluna], "bbbbbb")
    while sigma[maximo][maximo] < 11:
            sigma[maximo][maximo] = 0
            maximo -= 1
    print(U@sigma@V_transposto)
    v = U@sigma@V_transposto
    v = v[linha][coluna]
    while abs(numero- v) > 0.5:
        sigma[maximo][maximo] = 0
        print(sigma)
        print(abs(numero- v) )
        v = U@sigma@V_transposto
        v = v[linha][coluna]
        maximo -= 1
  
    return sigma
 
    



def main():
    df = pd.read_csv('ratings_small.csv', sep=',')

   
    df = df.pivot(index='userId', columns='movieId', values='rating')
    print(df)
   
    sigma = svd(df)

    with open('sigma.txt', 'w') as f:
         f.write(str(sigma))

    sigma = sigma.tolist()
    with open('sigma.txt', 'w') as f:
         f.write(str(sigma))
    
   


    
# if __name__ == '__main__':
#     main()



with open('sigma.txt', 'r') as f:
    f.read()
    lista_numpy = np.array(f.readlines())
    print(lista_numpy)